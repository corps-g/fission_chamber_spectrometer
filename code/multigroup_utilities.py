# Utilities for handling muligroup formats and data
import numpy as np
from scipy.integrate import quad
from scipy.interpolate import interp1d 

def collapse(bounds, data, E=None) :
    """ Collapse continuous or point-wise data onto group structure. 

    For point-wise data, interpolation is used to evaluate data at any 
    point.
    
    For all data, numerical quadrature is used to integrate the 
    data over the group.
    """
    
    if E is None :
        f = data
    else :   
        assert(len(data) == len(E))
        f = interp1d(E, data, kind='linear', bounds_error=False, 
                     fill_value=(data[0],data[-1]))
    data_mg = np.zeros(len(bounds)-1) 
    for g in range(len(data_mg)) :
        a, b = bounds[g:g+2]
        data_mg[g] = quad(f, a, b)[0] / (b-a)
    return data_mg

def plot_multigroup_data(eb, phi, scale="") :
    """ Return easily-plotted multigroup data given group values and bounds"""
    
    def barchart(x, y) :
        X = np.zeros(2*len(y))
        Y = np.zeros(2*len(y))
        for i in range(0, len(y)) :
            X[2*i]   = x[i]
            X[2*i+1] = x[i+1]
            Y[2*i]   = y[i]
            Y[2*i+1] = y[i]
        return X, Y
    phi = np.array(phi)
    eb  = np.array(eb)
    ng = len(phi)
    del_e = eb[0:ng]-eb[1:ng+1]
    if scale == "group-to-e" :
        # group flux must be divided by group bins
        phi[:] = phi[:] / del_e[:]
    elif scale == "group-to-u" :
        e = 0.5*(eb[:-1]+eb[1:])
        phi[:] = phi[:] / del_e[:] * e[:]
    elif scale == "e-to-group" :
        phi[:] = phi[:] * del_e[:]
    e, phi = barchart(eb,  phi)
    return e, phi
    
def energy_groups(structure='wims69', lower=None, upper=None, MeV=False) :
    """ Returns energy group bounds in decreasing order.
    
    Parameters
    ----------
    structure : str
        Named structure.  Options currently include wims69, lwr32, 
        phoenix25, shem281, hr6, and hr16.
    lower : float
        Lowest energy bound (eV)
    upper : float
        Highest energy bound (eV)
    MeV : bool
        If true, return bounds in MeV
    """
    
    if structure == 'wims69' :
        """ WIMS 69-group structure.
        
        Stammler, R. J., and M. J. Abbate. "Methods of Steady-State Reactor 
        Analysis in Nuclear Design." (1984).
        """
        eb = np.array([  1.00000000e+07,   6.06550000e+06,   3.67900000e+06,
                         2.23100000e+06,   1.35300000e+06,   8.21000000e+05,
                         5.00000000e+05,   3.02500000e+05,   1.83000000e+05,
                         1.11000000e+05,   6.73400000e+04,   4.08500000e+04,
                         2.47800000e+04,   1.50300000e+04,   9.11800000e+03,
                         5.53000000e+03,   3.51910000e+03,   2.23945000e+03,
                         1.42510000e+03,   9.06899000e+02,   3.67263000e+02,
                         1.48729000e+02,   7.55014000e+01,   4.80520000e+01,
                         2.77000000e+01,   1.59680000e+01,   9.87700000e+00,
                         4.00000000e+00,   3.30000000e+00,   2.60000000e+00,
                         2.10000000e+00,   1.50000000e+00,   1.30000000e+00,
                         1.15000000e+00,   1.12300000e+00,   1.09700000e+00,
                         1.07100000e+00,   1.04500000e+00,   1.02000000e+00,
                         9.96000000e-01,   9.72000000e-01,   9.50000000e-01,
                         9.10000000e-01,   8.50000000e-01,   7.80000000e-01,
                         6.25000000e-01,   5.00000000e-01,   4.00000000e-01,
                         3.50000000e-01,   3.20000000e-01,   3.00000000e-01,
                         2.80000000e-01,   2.50000000e-01,   2.20000000e-01,
                         1.80000000e-01,   1.40000000e-01,   1.00000000e-01,
                         8.00000000e-02,   6.70000000e-02,   5.80000000e-02,
                         5.00000000e-02,   4.20000000e-02,   3.50000000e-02,
                         3.00000000e-02,   2.50000000e-02,   2.00000000e-02,
                         1.50000000e-02,   1.00000000e-02,   5.00000000e-03,
                         1.00000000e-05])
                         
    elif structure == 'lwr32' :
        """ 32-group structure for LWR analysis
        
        Stammler, R. J., and M. J. Abbate. "Methods of Steady-State Reactor 
        Analysis in Nuclear Design." (1984).    
        """
        eb = np.array([  1.00000000e+07,   3.67900000e+06,   1.35300000e+06,
                         5.00000000e+05,   4.08500000e+04,   9.11800000e+03,
                         1.48729000e+02,   4.80520000e+01,   1.59680000e+01,
                         9.87700000e+00,   4.00000000e+00,   3.30000000e+00,
                         2.60000000e+00,   2.10000000e+00,   1.30000000e+00,
                         1.15000000e+00,   1.09700000e+00,   1.02000000e+00,
                         9.72000000e-01,   0.00000000e+00,   0.00000000e+00,
                         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
                         0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
                         0.00000000e+00,   9.50000000e-01,   5.00000000e-02,
                         3.00000000e-02,   1.50000000e-02,   1.00000000e-05])
                         
    elif structure == 'phoenix25' :
        """ 25-group PHOENIX structure for LWR analysis
                
        Stammler, R. J., and M. J. Abbate. "Methods of Steady-State Reactor 
        Analysis in Nuclear Design." (1984).
        """        
        eb = np.array([  1.00000000e+07,   3.67900000e+06,   1.35300000e+06,
                         5.00000000e+05,   9.11800000e+03,   1.48729000e+02,
                         4.80520000e+01,   1.59680000e+01,   9.87700000e+00,
                         4.00000000e+00,   1.30000000e+00,   1.09700000e+00,
                         1.02000000e+00,   9.50000000e-01,   6.25000000e-01,
                         3.50000000e-01,   2.80000000e-01,   1.80000000e-01,
                         1.40000000e-01,   1.00000000e-01,   8.00000000e-02,
                         5.80000000e-02,   4.20000000e-02,   3.00000000e-02,
                         1.50000000e-02,   1.00000000e-05])          
    
    elif structure == 'scale238' :
        """ 238-group SCALE format
        
        ORNL, SCALE Manual Scale. "A Comprehensive Modeling and Simulation 
        Suite for Nuclear Safety Analysis and Design." ORNL/TM-2005/39, 
        Version 6.
        """
        eb = np.array([  2.00000000e+07,   1.73330000e+07,   1.56830000e+07,
                         1.45500000e+07,   1.38400000e+07,   1.28400000e+07,
                         1.00000000e+07,   8.18730000e+06,   6.43400000e+06,
                         4.80000000e+06,   4.30400000e+06,   3.00000000e+06,
                         2.47900000e+06,   2.35400000e+06,   1.85000000e+06,
                         1.50000000e+06,   1.40000000e+06,   1.35600000e+06,
                         1.31700000e+06,   1.25000000e+06,   1.20000000e+06,
                         1.10000000e+06,   1.01000000e+06,   9.20000000e+05,
                         9.00000000e+05,   8.75000000e+05,   8.61100000e+05,
                         8.20000000e+05,   7.50000000e+05,   6.79000000e+05,
                         6.70000000e+05,   6.00000000e+05,   5.73000000e+05,
                         5.50000000e+05,   4.99520000e+05,   4.70000000e+05,
                         4.40000000e+05,   4.20000000e+05,   4.00000000e+05,
                         3.30000000e+05,   2.70000000e+05,   2.00000000e+05,
                         1.50000000e+05,   1.28300000e+05,   1.00000000e+05,
                         8.50000000e+04,   8.20000000e+04,   7.50000000e+04,
                         7.30000000e+04,   6.00000000e+04,   5.20000000e+04,
                         5.00000000e+04,   4.50000000e+04,   3.00000000e+04,
                         2.50000000e+04,   1.70000000e+04,   1.30000000e+04,
                         9.50000000e+03,   8.03000000e+03,   6.00000000e+03,
                         3.90000000e+03,   3.74000000e+03,   3.00000000e+03,
                         2.58000000e+03,   2.29000000e+03,   2.20000000e+03,
                         1.80000000e+03,   1.55000000e+03,   1.50000000e+03,
                         1.15000000e+03,   9.50000000e+02,   6.83000000e+02,
                         6.70000000e+02,   5.50000000e+02,   3.05000000e+02,
                         2.85000000e+02,   2.40000000e+02,   2.10000000e+02,
                         2.07500000e+02,   1.92500000e+02,   1.86000000e+02,
                         1.22000000e+02,   1.19000000e+02,   1.15000000e+02,
                         1.08000000e+02,   1.00000000e+02,   9.00000000e+01,
                         8.20000000e+01,   8.00000000e+01,   7.60000000e+01,
                         7.20000000e+01,   6.75000000e+01,   6.50000000e+01,
                         6.10000000e+01,   5.90000000e+01,   5.34000000e+01,
                         5.20000000e+01,   5.06000000e+01,   4.92000000e+01,
                         4.83000000e+01,   4.70000000e+01,   4.52000000e+01,
                         4.40000000e+01,   4.24000000e+01,   4.10000000e+01,
                         3.96000000e+01,   3.91000000e+01,   3.80000000e+01,
                         3.70000000e+01,   3.55000000e+01,   3.46000000e+01,
                         3.37500000e+01,   3.32500000e+01,   3.17500000e+01,
                         3.12500000e+01,   3.00000000e+01,   2.75000000e+01,
                         2.50000000e+01,   2.25000000e+01,   2.10000000e+01,
                         2.00000000e+01,   1.90000000e+01,   1.85000000e+01,
                         1.70000000e+01,   1.60000000e+01,   1.51000000e+01,
                         1.44000000e+01,   1.37500000e+01,   1.29000000e+01,
                         1.19000000e+01,   1.15000000e+01,   1.00000000e+01,
                         9.10000000e+00,   8.10000000e+00,   7.15000000e+00,
                         7.00000000e+00,   6.75000000e+00,   6.50000000e+00,
                         6.25000000e+00,   6.00000000e+00,   5.40000000e+00,
                         5.00000000e+00,   4.75000000e+00,   4.00000000e+00,
                         3.73000000e+00,   3.50000000e+00,   3.15000000e+00,
                         3.05000000e+00,   3.00000000e+00,   2.97000000e+00,
                         2.87000000e+00,   2.77000000e+00,   2.67000000e+00,
                         2.57000000e+00,   2.47000000e+00,   2.38000000e+00,
                         2.30000000e+00,   2.21000000e+00,   2.12000000e+00,
                         2.00000000e+00,   1.94000000e+00,   1.86000000e+00,
                         1.77000000e+00,   1.68000000e+00,   1.59000000e+00,
                         1.50000000e+00,   1.45000000e+00,   1.40000000e+00,
                         1.35000000e+00,   1.30000000e+00,   1.25000000e+00,
                         1.22500000e+00,   1.20000000e+00,   1.17500000e+00,
                         1.15000000e+00,   1.14000000e+00,   1.13000000e+00,
                         1.12000000e+00,   1.11000000e+00,   1.10000000e+00,
                         1.09000000e+00,   1.08000000e+00,   1.07000000e+00,
                         1.06000000e+00,   1.05000000e+00,   1.04000000e+00,
                         1.03000000e+00,   1.02000000e+00,   1.01000000e+00,
                         1.00000000e+00,   9.75000000e-01,   9.50000000e-01,
                         9.25000000e-01,   9.00000000e-01,   8.50000000e-01,
                         8.00000000e-01,   7.50000000e-01,   7.00000000e-01,
                         6.50000000e-01,   6.25000000e-01,   6.00000000e-01,
                         5.50000000e-01,   5.00000000e-01,   4.50000000e-01,
                         4.00000000e-01,   3.75000000e-01,   3.50000000e-01,
                         3.25000000e-01,   3.00000000e-01,   2.75000000e-01,
                         2.50000000e-01,   2.25000000e-01,   2.00000000e-01,
                         1.75000000e-01,   1.50000000e-01,   1.25000000e-01,
                         1.00000000e-01,   9.00000000e-02,   8.00000000e-02,
                         7.00000000e-02,   6.00000000e-02,   5.00000000e-02,
                         4.00000000e-02,   3.00000000e-02,   2.53000000e-02,
                         1.00000000e-02,   7.50000000e-03,   5.00000000e-03,
                         4.00000000e-03,   3.00000000e-03,   2.50000000e-03,
                         2.00000000e-03,   1.50000000e-03,   1.20000000e-03,
                         1.00000000e-03,   7.50000000e-04,   5.00000000e-04,
                         1.00000000e-04,   1.00000000e-05])
                         
    elif structure == 'shem281' :
        """ SHEM 281-group Structure 
        
        
        These bounds were derived from the lethargy values given in the
        reference.        
        
        Hfaiedh, Noureddine. Nouvelle methodologie de calcul de l'absorption
        resonnante. Diss. Strasbourg 1, 2006.
        """
        eb = np.array([  1.96403298e+07,   1.49182470e+07,   1.38403065e+07,
                         1.16183424e+07,   1.00000000e+07,   9.04837418e+06,
                         8.18730753e+06,   7.40818221e+06,   6.06530660e+06,
                         6.06530660e+06,   4.96585304e+06,   4.06569660e+06,
                         3.32871084e+06,   2.72531793e+06,   2.23130160e+06,
                         1.90138980e+06,   1.63654137e+06,   1.40576986e+06,
                         1.33694224e+06,   1.28696289e+06,   1.16204931e+06,
                         1.05115030e+06,   9.51120128e+05,   8.60006865e+05,
                         7.06512131e+05,   5.78443209e+05,   4.94002398e+05,
                         4.56021689e+05,   4.12501719e+05,   3.83883980e+05,
                         3.20646853e+05,   9.85279606e+04,   2.30014045e+05,
                         1.95007959e+05,   1.64999158e+05,   1.39999713e+05,
                         1.22773399e+05,   1.15623633e+05,   9.46646240e+04,
                         8.22974705e+04,   6.73794700e+04,   5.51656442e+04,
                         4.99159391e+04,   4.08677144e+04,   3.69786372e+04,
                         3.34596546e+04,   2.92810448e+04,   2.73944482e+04,
                         2.51873119e+04,   2.49991137e+04,   2.26994427e+04,
                         1.85847318e+04,   1.62004719e+04,   1.48996895e+04,
                         1.36036804e+04,   1.11377515e+04,   9.11881966e+03,
                         7.46585808e+03,   6.11252761e+03,   5.00451433e+03,
                         4.09734979e+03,   3.48107228e+03,   2.99618668e+03,
                         2.57884177e+03,   2.21962968e+03,   1.91045297e+03,
                         1.61404003e+03,   1.34506235e+03,   1.13500876e+03,
                         1.06496334e+03,   9.07501892e+02,   7.48518299e+02,
                         6.12834951e+02,   5.01746821e+02,   4.10795552e+02,
                         3.53575009e+02,   3.19927898e+02,   2.83750591e+02,
                         2.41796304e+02,   1.97966070e+02,   1.62080909e+02,
                         1.32700625e+02,   1.08646083e+02,   8.89518890e+01,
                         7.50455792e+01,   6.14421235e+01,   5.26726134e+01,
                         4.57913703e+01,   4.39958649e+01,   4.01690039e+01,
                         3.37201523e+01,   2.76077257e+01,   2.45889130e+01,
                         2.25243208e+01,   2.23783875e+01,   2.21557189e+01,
                         2.20011704e+01,   2.17018096e+01,   2.14858730e+01,
                         2.13359971e+01,   2.12295834e+01,   2.11448346e+01,
                         2.10604242e+01,   2.09763508e+01,   2.07676326e+01,
                         2.06847280e+01,   2.06021544e+01,   2.05199103e+01,
                         2.04175669e+01,   2.02751430e+01,   2.00734019e+01,
                         1.95973754e+01,   1.93926795e+01,   1.91997191e+01,
                         1.90848657e+01,   1.79590767e+01,   1.77590572e+01,
                         1.76210754e+01,   1.74457428e+01,   1.68305494e+01,
                         1.65501580e+01,   1.60497882e+01,   1.57792479e+01,
                         1.48662813e+01,   1.47301388e+01,   1.45952430e+01,
                         1.44702621e+01,   1.42505521e+01,   1.40496242e+01,
                         1.35460589e+01,   1.33297136e+01,   1.25999853e+01,
                         1.24721187e+01,   1.23085686e+01,   1.21301689e+01,
                         1.19794856e+01,   1.18153041e+01,   1.17094435e+01,
                         1.15894552e+01,   1.12694514e+01,   1.10529311e+01,
                         1.08037754e+01,   1.05792618e+01,   9.50003660e+00,
                         9.14032233e+00,   8.97996200e+00,   8.80038659e+00,
                         8.67370167e+00,   8.52408470e+00,   8.30033314e+00,
                         8.13028234e+00,   7.97008893e+00,   7.83966145e+00,
                         7.73995328e+00,   7.60036028e+00,   7.38016245e+00,
                         7.13987773e+00,   6.99430083e+00,   6.91778513e+00,
                         6.87021672e+00,   6.83526781e+00,   6.81070508e+00,
                         6.79166178e+00,   6.77605891e+00,   6.75981587e+00,
                         6.74226317e+00,   6.71669119e+00,   6.63126543e+00,
                         6.60611444e+00,   6.58830199e+00,   6.57185181e+00,
                         6.55609828e+00,   6.53907456e+00,   6.51492469e+00,
                         6.48178316e+00,   6.43206509e+00,   6.35979186e+00,
                         6.28016121e+00,   6.16011626e+00,   6.05991426e+00,
                         5.96015001e+00,   5.80021886e+00,   5.72015356e+00,
                         5.61979761e+00,   5.53004333e+00,   5.48817430e+00,
                         5.41025189e+00,   5.38003915e+00,   5.32011889e+00,
                         5.21008229e+00,   5.10998082e+00,   4.93323841e+00,
                         4.78791795e+00,   4.41980532e+00,   4.30981789e+00,
                         4.21983341e+00,   4.00000516e+00,   3.88217534e+00,
                         3.71209219e+00,   3.54307733e+00,   3.14211346e+00,
                         2.88405027e+00,   2.77512461e+00,   2.74092554e+00,
                         2.71990146e+00,   2.70011847e+00,   2.64004418e+00,
                         2.62005589e+00,   2.59009784e+00,   2.55000584e+00,
                         2.46994443e+00,   2.33006380e+00,   2.27298888e+00,
                         2.21709028e+00,   2.15695100e+00,   2.07009738e+00,
                         1.98992242e+00,   1.90007935e+00,   1.77996847e+00,
                         1.66895161e+00,   1.58803222e+00,   1.51997768e+00,
                         1.44396911e+00,   1.41000838e+00,   1.38098312e+00,
                         1.33095356e+00,   1.29303950e+00,   1.25094048e+00,
                         1.21396960e+00,   1.16999053e+00,   1.14797056e+00,
                         1.12997516e+00,   1.11604998e+00,   1.10395110e+00,
                         1.09198337e+00,   1.07798726e+00,   1.03499402e+00,
                         1.02101339e+00,   1.00903623e+00,   9.96501784e-01,
                         9.81960349e-01,   9.63961089e-01,   9.44023377e-01,
                         9.19979079e-01,   8.80025540e-01,   8.20038204e-01,
                         7.19999797e-01,   6.24999550e-01,   5.94993767e-01,
                         5.54990463e-01,   5.20011502e-01,   4.75017160e-01,
                         4.31579153e-01,   3.90001634e-01,   3.52993954e-01,
                         3.25008368e-01,   3.05011942e-01,   2.79989172e-01,
                         2.54996783e-01,   2.31192554e-01,   2.09610476e-01,
                         1.90005103e-01,   1.61895478e-01,   1.37999620e-01,
                         1.19995103e-01,   1.04297869e-01,   8.97969428e-02,
                         7.64969545e-02,   6.51994433e-02,   5.54982190e-02,
                         4.73019220e-02,   4.02999783e-02,   3.43998062e-02,
                         2.92989280e-02,   2.49394511e-02,   2.00103758e-02,
                         1.48299818e-02,   1.04505116e-02,   7.14527236e-03,
                         4.55602681e-03,   2.49990050e-03,   1.00000000e-05])
    
    elif structure == 'hr6' :
        """ Hansen-Roach 6-group Format 
        
        Hansen, G.E. and Roach, W.H. Six and sixteen group cross sections 
        for fast and intermediate critical assemblies. No. LAMS-2543. Los 
        Alamos Scientific Lab., N. Mex., 1961.               
        """
        eb = np.array([  2.00000000e+07,   3.00000000e+06,   1.40000000e+06,
                         9.00000000e+05,   4.00000000e+05,   1.00000000e+05,
                         1.00000000e-05])
                        
    elif structure == 'hr16' :
        """ Hansen-Roach 16-group Format 
        
        Hansen, G.E. and Roach, W.H. Six and sixteen group cross sections 
        for fast and intermediate critical assemblies. No. LAMS-2543. Los 
        Alamos Scientific Lab., N. Mex., 1961. 
        """        
        eb = np.array([  2.00000000e+07,   3.00000000e+06,   1.40000000e+06,
                         9.00000000e+05,   4.00000000e+03,   1.00000000e+05,
                         1.70000000e+04,   3.00000000e+03,   5.50000000e+02,
                         1.00000000e+02,   3.00000000e+01,   1.00000000e+01,
                         3.00000000e+00,   1.00000000e+00,   4.00000000e-01,
                         1.00000000e-01,   1.00000000e-05])

    if not upper :
        upper = eb[0]
    if not lower:
        lower = eb[-1]
    if upper <= eb[1] :
        print('upper bound cannot be less than second largest bound')
        print(upper, eb[1])
    elif upper :
        eb[0] = upper
    if lower >= eb[-2] :
        print('lower bound cannot be greater than second lowest bound')
    elif lower :
        eb[-1] = lower
    if MeV :
        eb /= 1e6
    return eb